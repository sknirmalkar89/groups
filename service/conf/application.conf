# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
  log-config-on-start = off
  actor {
    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 32.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64
        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
      }
    }
  }
}
## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = [ "en" ]
}

play.http.secret.key = "sunbirdGroup2506202"

## Play HTTP settings
# ~~~~~
## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  actionCreator = utils.module.OnRequestHandler

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  errorHandler = utils.module.ErrorHandler

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  filters = utils.module.AllFilters

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}
## Netty Provider
# ~~~~~
play.server {
  provider = "play.core.server.NettyServerProvider"
  netty {
    # The number of event loop threads. 0 means let Netty decide, which by default will select 2 times the number of
    # available processors.
    eventLoopThreads = 0
    log.wire = true
    # The transport to use, either jdk or native.
    # Native socket transport has higher performance and produces less garbage but are only available on linux
    transport = "native"
    # If you run Play on Linux, you can use Netty's native socket transport
    # for higher performance with less garbage.
    #transport = "native"
    maxChunkSize = 30000000
    option {
      # Set whether connections should use TCP keep alive
      child.SO_KEEPALIVE = true
      # Set whether the TCP no delay flag is set
      # child.tcpNoDelay = false
      # Set the size of the backlog of TCP connections.  The default and exact meaning of this parameter is JDK specific.
      # backlog = 100
    }
    http {
      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = infinite
    }
  }
}

thisActorSystem {
  default-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 8
      parallelism-factor = 32.0
      parallelism-max = 64
    }
    # Throughput for default Dispatcher, set to 1 for as fair as possible
    throughput = 1
  }
  health-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 1
      parallelism-factor = 2.0
      parallelism-max = 2
    }
    # Throughput for default Dispatcher, set to 1 for as fair as possible
    throughput = 1
  }
  group-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 8
      parallelism-factor = 32.0
      parallelism-max = 64
    }
    # Throughput for default Dispatcher, set to 1 for as fair as possible
    throughput = 1
  }
  akka {
    stdout-loglevel = "OFF"
    loglevel = "OFF"
    log-config-on-start = off
    actor {
      provider = "akka.actor.LocalActorRefProvider"
      serializers {
        java = "akka.serialization.JavaSerializer"
      }
      serialization-bindings {
        "org.sunbird.request.Request" = java
        "org.sunbird.response.Response" = java
      }
      deployment {
        /HealthActor
                  {
                    router = smallest-mailbox-pool
                    nr-of-instances = 5
                    dispatcher = health-dispatcher
                  }
                /CreateGroupActor
                  {
                    router = smallest-mailbox-pool
                    nr-of-instances = 5
                    dispatcher = group-dispatcher
                  }
                /ReadGroupActor
                  {
                    router = smallest-mailbox-pool
                    nr-of-instances = 15
                    dispatcher = group-dispatcher
                  }
                  /SearchGroupActor
                   {
                     router = smallest-mailbox-pool
                     nr-of-instances = 10
                     dispatcher = group-dispatcher
                   }
                /UpdateGroupActor
                  {
                    router = smallest-mailbox-pool
                    nr-of-instances = 10
                    dispatcher = group-dispatcher
                  }
                  /DeleteGroupActor
                  {
                    router = smallest-mailbox-pool
                    nr-of-instances = 10
                    dispatcher = group-dispatcher
                  }
                 /UpdateGroupMembershipActor
                 {
                    router = smallest-mailbox-pool
                    nr-of-instances = 10
                    dispatcher = group-dispatcher
                 }
                /CacheActor{
                  router = smallest-mailbox-pool
                  nr-of-instances = 15
                  dispatcher = group-dispatcher
                }
      }
    }
    remote {
      maximum-payload-bytes = 30000000 bytes
      netty.tcp {
        port = 8088
        message-frame-size =  30000000b
        send-buffer-size =  30000000b
        receive-buffer-size =  30000000b
        maximum-frame-size = 30000000b
      }
    }
  }
}

play.filters.disabled += play.filters.csrf.CSRFFilter


# Redis Configuration
redis.host=${?sunbird_redis_host}
redis.port=${?sunbird_redis_port}
redis.maxConnections=${?sunbird_redis_maxConnections}


## WS (HTTP Client)
# ~~~~~
libraryDependencies += javaWs
## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.
# Root logger:
#logger.root=ERROR
# Logger used by the framework:
#logger.play=INFO
# Logger provided to your application:
#logger.application=DEBUG
# APP Specific config
# ~~~~~
# Application specific configurations can be provided here
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  enabled += utils.module.StartModule

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["localhost:9000", "."]
  }
}


